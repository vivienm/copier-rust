#[derive(Debug, clap::Parser)]
#[clap(about)]
struct Args {
    /// Set the verbosity level for log messages.
    #[clap(
        global = true,
        long,
        default_value = "info",
        env = "{{ package_name | replace('-', '_') | upper }}_LOG_LEVEL"
    )]
    log_level: tracing::level_filters::LevelFilter,
    /// Generate the completion script for the specified shell.
    #[clap(long, exclusive = true, name = "SHELL")]
    completion: Option<clap_complete::Shell>,
    /// The person to greet.
{# https://github.com/clap-rs/clap/discussions/5501 #}
    #[clap(required = true)]
    name: Option<String>,
}

fn generate_completions(shell: clap_complete::Shell) -> ! {
    clap_complete::generate(
        shell,
        &mut <Args as clap::CommandFactory>::command(),
        clap::crate_name!(),
        &mut std::io::stdout(),
    );
    std::process::exit(0);
}

fn setup_logging(log_level: tracing::level_filters::LevelFilter) -> anyhow::Result<()> {
    let subscriber = tracing_subscriber::fmt()
        .with_writer(std::io::stderr)
        .with_max_level(log_level)
        .finish();
    tracing::subscriber::set_global_default(subscriber)?;
    Ok(())
}

fn main() -> anyhow::Result<()> {
    let args = <Args as clap::Parser>::parse();
    if let Some(shell) = args.completion {
        generate_completions(shell);
    }
    setup_logging(args.log_level)?;
    println!("Hello {}!", args.name.expect("required"));
    Ok(())
}
